#!/usr/bin/env ruby
require 'bundler/setup'
$LOAD_PATH.unshift(File.expand_path('../../lib', __FILE__))

require 'optparse'
require 'optparse/date'
require 'freeagent_api'
require 'user'
require 'csv'

script_name = File.basename($0)
start_date = Date.today
end_date = Date.today
OptionParser.new do |parser|
  parser.banner = <<EOS
Usage: #{script_name} [options]

Generates a report from FreeAgent of billable days per user per week. Prints
CSV to stdout with one row per week. Time is recorded in FreeAgent in hours;
this script assumes 1 day = 8 hours.

Options:

EOS
  parser.on('-s', '--start-date [DATE]', Date, 'Defaults to today') do |date|
    start_date = date
  end
  parser.on('-e', '--end-date [DATE]', Date, 'Defaults to today') do |date|
    end_date = date
  end
  parser.on('-h', '--help', 'Prints this help') do
    puts parser
    exit
  end
end.parse!

api = FreeagentAPI.new

users = User.members

report_date = start_date

results = {}

while report_date < end_date do
  cwyear = report_date.cwyear
  cweek = report_date.cweek
  from_date = Date.commercial(cwyear, cweek, 1)
  to_date = Date.commercial(cwyear, cweek, 7)
  week_key = from_date.strftime('%d %b %Y')

  results[week_key] = users.each.with_object({}) do |user, hash|
    timeslips = api.get_resources('timeslips', user: user.url, from_date: from_date, to_date: to_date, nested: true)
    timeslips.reject! { |t| !t['task']['is_billable'] }
    total_days = timeslips.sum { |t| BigDecimal.new(t.hours) / BigDecimal.new(8) }
    hash[user.first_name] = total_days
    hash
  end

  report_date = report_date + 7
end

user_keys = users.map(&:first_name)
CSV($stdout, col_sep: "\t") do |csv|
  csv << ['Month', *user_keys]
  results.each do |week_key, days_per_user|
    csv << [week_key, *days_per_user.values_at(*user_keys).map(&:to_f)]
  end
end
