#!/usr/bin/env ruby
require 'bundler/setup'
$LOAD_PATH.unshift(File.expand_path('../../lib', __FILE__))

require 'optparse'
require 'freeagent_api'
require 'csv'

script_name = File.basename($0)
number_of_months = 1
OptionParser.new do |parser|
  parser.banner = <<EOS
Usage: #{script_name} [options]

Generates a report from FreeAgent listing the tasks with billable time
recorded for the given month. Prints CSV to stdout with one row per combination
of month and task.

Options:

EOS
  parser.on('-m', '--number-of-months [INTEGER]', OptionParser::DecimalInteger, 'Defaults to 1') do |number|
    number_of_months = number
  end
  parser.on('-h', '--help', 'Prints this help') do
    puts parser
    exit
  end
end.parse!

api = FreeagentAPI.new

reference_date = Date.today << number_of_months

projects = api.get_resources('projects')
tasks = api.get_resources('tasks')

results = {}

while reference_date < Date.today do
  month_key = reference_date.strftime('%b %Y')
  year = reference_date.year
  month = reference_date.month
  from_date = Date.new(year, month, 1)
  to_date = Date.new(year, month, -1)

  timeslips = api.get_resources('timeslips', from_date: from_date, to_date: to_date, reporting_type: 'billable')

  results[month_key] = timeslips.group_by(&:task).map do |task_url, ts|
    task = tasks.find { |t| t.url == task_url }
    next unless task
    project_url = task.project
    project = projects.find { |p| p.url == project_url }
    next unless project
    contact_url = project.contact
    contact = api.get_resource('contact', contact_url)
    [contact.organisation_name, project.name, task.name].join(' - ')
  end.compact.sort

  reference_date = reference_date >> 1
end

CSV($stdout, col_sep: "\t") do |csv|
  csv << ['Month', 'Project']
  results.each do |month_key, task_names|
    if task_names.empty?
      csv << [month_key]
    else
      task_names.each do |task_name|
        csv << [month_key, task_name]
      end
    end
  end
end
