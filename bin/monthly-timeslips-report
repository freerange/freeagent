#!/usr/bin/env ruby
require 'bundler/setup'
$LOAD_PATH.unshift(File.expand_path('../../lib', __FILE__))

require 'optparse'
require 'optparse/date'
require 'freeagent_api'
require 'user'
require 'csv'

script_name = File.basename($0)
reference_date = Date.today << 1
OptionParser.new do |parser|
  parser.banner = <<EOS
Usage: #{script_name} [options]

Generates a report of the time recorded against all "active" projects in
FreeAgent for the month in which the reference data appears. By default this
will be last month. Prints CSV to stdout with one row per combination of project
and user where the user has billed some time to the project. Time is recorded in
FreeAgent in hours; this script assumes 1 day = 8 hours.

Note that this script was originally developed for the "Record the time worked
per project" Harmonia task [1].

[1]: https://github.com/freerange/business/wiki/Record-the-time-worked-per-project

Options:

EOS
  parser.on('-r', '--reference-date [DATE]', Date, 'Defaults to 1 month ago') do |date|
    reference_date = date
  end
  parser.on('-h', '--help', 'Prints this help') do
    puts parser
    exit
  end
end.parse!

year = reference_date.year
month = reference_date.month

from_date = Date.new(year, month, 1)
to_date = Date.new(year, month, -1)

api = FreeagentAPI.new

users = User.members

results = {}

projects = api.get_resources('projects', view: 'active')
projects.each do |project|
  results[project.name] = Hash[*users.map { |u| [u.first_name, 0] }.flatten]
  timeslips = api.get_resources('timeslips', project: project.url, from_date: from_date, to_date: to_date)
  timeslips.group_by(&:user).each do |user_url, ts|
    user = users.find { |u| u.url == user_url }
    total_hours = ts.inject(0) { |total, t| total + BigDecimal.new(t.hours) }
    results[project.name][user.first_name] = total_hours
  end
end

CSV($stdout, col_sep: "\t") do |csv|
  csv << %w(month project user days)
  results.each do |project_name, hours_per_user|
    hours_per_user.each do |first_name, hours|
      next if hours.zero?
      csv << [from_date.strftime('%B %Y'), project_name, first_name, hours.to_f/8]
    end
  end
end
